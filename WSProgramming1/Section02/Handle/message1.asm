; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31629.0 

	TITLE	C:\practice\CPPBasic\WSProgramming1\Section02\Handle\message1.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG92993 DB	'LBUTTONDOWN : %d, %d', 0aH, 00H
	ORG $+2
$SG92994 DB	'B', 00H
	ORG $+2
$SG92995 DB	'A', 00H
	ORG $+2
$SG92997 DB	'WM_KEYDOWN', 0aH, 00H
$SG93016 DB	'MyWindow', 00H
	ORG $+3
$SG93017 DB	'Hello', 00H
	ORG $+2
$SG93018 DB	'MyWindow', 00H
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	?WndProc@@YGJPAUHWND__@@IIJ@Z			; WndProc
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassExA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	_memset:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
; Function compile flags: /Odtp
; File C:\practice\CPPBasic\WSProgramming1\Section02\Handle\message1.cpp
_TEXT	SEGMENT
_wcex$ = -84						; size = 48
_msg$ = -36						; size = 28
_hwnd$ = -8						; size = 4
_atom$ = -4						; size = 2
_main	PROC

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H

; 34   : 	WNDCLASSEX wcex = { 0 };

	push	48					; 00000030H
	push	0
	lea	eax, DWORD PTR _wcex$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 35   : 
; 36   : 	wcex.cbSize = sizeof(wcex);

	mov	DWORD PTR _wcex$[ebp], 48		; 00000030H

; 37   : 	wcex.lpfnWndProc = WndProc;

	mov	DWORD PTR _wcex$[ebp+8], OFFSET ?WndProc@@YGJPAUHWND__@@IIJ@Z ; WndProc

; 38   : 	wcex.lpszClassName = _T("MyWindow");

	mov	DWORD PTR _wcex$[ebp+40], OFFSET $SG93016

; 39   : 	wcex.hbrBackground = CreateSolidBrush(RGB(255, 255, 255));

	push	16777215				; 00ffffffH
	call	DWORD PTR __imp__CreateSolidBrush@4
	mov	DWORD PTR _wcex$[ebp+32], eax

; 40   : 	wcex.hCursor = LoadCursor(0, IDC_ARROW);

	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _wcex$[ebp+28], eax

; 41   : 
; 42   : 	ATOM atom = RegisterClassEx(&wcex);

	lea	ecx, DWORD PTR _wcex$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegisterClassExA@4
	mov	WORD PTR _atom$[ebp], ax

; 43   : 
; 44   : 	HWND hwnd = CreateWindowEx(0, _T("MyWindow"), _T("Hello"), WS_OVERLAPPEDWINDOW,

	push	0
	push	0
	push	0
	push	0
	push	500					; 000001f4H
	push	500					; 000001f4H
	push	0
	push	0
	push	13565952				; 00cf0000H
	push	OFFSET $SG93017
	push	OFFSET $SG93018
	push	0
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR _hwnd$[ebp], eax

; 45   : 		0, 0, 500, 500, 0, 0, 0, 0);
; 46   : 	ShowWindow(hwnd, SW_SHOW);

	push	5
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ShowWindow@8
$LN2@main:

; 47   : 
; 48   : 	MSG msg;
; 49   : 
; 50   : 	while (GetMessage(&msg, 0, 0, 0))

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__GetMessageA@16
	test	eax, eax
	je	SHORT $LN3@main

; 51   : 	{
; 52   : 		DispatchMessage(&msg);

	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__DispatchMessageA@4

; 53   : 	}

	jmp	SHORT $LN2@main
$LN3@main:

; 54   : 	return msg.wParam;

	mov	eax, DWORD PTR _msg$[ebp+8]

; 55   : }

	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\practice\CPPBasic\WSProgramming1\Section02\Handle\message1.cpp
_TEXT	SEGMENT
_x$1 = -12						; size = 4
_y$2 = -8						; size = 4
tv64 = -4						; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?WndProc@@YGJPAUHWND__@@IIJ@Z PROC			; WndProc

; 7    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 8    : 	switch (message)

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN6@WndProc
	cmp	DWORD PTR tv64[ebp], 256		; 00000100H
	je	SHORT $LN5@WndProc
	cmp	DWORD PTR tv64[ebp], 513		; 00000201H
	je	SHORT $LN4@WndProc
	jmp	SHORT $LN2@WndProc
$LN4@WndProc:

; 9    : 	{
; 10   : 	case WM_LBUTTONDOWN:
; 11   : 	{
; 12   : 		int x = lParam & 0x0000FFFF;

	mov	ecx, DWORD PTR _lParam$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _x$1[ebp], ecx

; 13   : 		int y = lParam >> 16;

	mov	edx, DWORD PTR _lParam$[ebp]
	sar	edx, 16					; 00000010H
	mov	DWORD PTR _y$2[ebp], edx

; 14   : 
; 15   : 		printf("LBUTTONDOWN : %d, %d\n", x, y);

	mov	eax, DWORD PTR _y$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$1[ebp]
	push	ecx
	push	OFFSET $SG92993
	call	_printf
	add	esp, 12					; 0000000cH

; 16   : 
; 17   : 		MessageBox(0, _T("A"), _T("B"), MB_OK);

	push	0
	push	OFFSET $SG92994
	push	OFFSET $SG92995
	push	0
	call	DWORD PTR __imp__MessageBoxA@16

; 18   : 	}
; 19   : 		break;

	jmp	SHORT $LN2@WndProc
$LN5@WndProc:

; 20   : 
; 21   : 	case WM_KEYDOWN:
; 22   : 		printf("WM_KEYDOWN\n");

	push	OFFSET $SG92997
	call	_printf
	add	esp, 4

; 23   : 		break;

	jmp	SHORT $LN2@WndProc
$LN6@WndProc:

; 24   : 
; 25   : 	case WM_DESTROY:
; 26   : 		PostQuitMessage(0);

	push	0
	call	DWORD PTR __imp__PostQuitMessage@4
$LN2@WndProc:

; 27   : 		break;
; 28   : 	}
; 29   : 	return DefWindowProc(hwnd, message, wParam, lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DefWindowProcA@16

; 30   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?WndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; WndProc
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 963  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

	push	ebp
	mov	ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H

; 646  :     }

	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

	push	ebp
	mov	ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
